(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     38710,        838]
NotebookOptionsPosition[     36751,        797]
NotebookOutlinePosition[     37557,        824]
CellTagsIndexPosition[     37514,        821]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["IoT Data Storage on a Blockchain", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
  3.770055604008165*^9, 3.7700556066618843`*^9}, {3.770629187164171*^9, 
  3.770629190665093*^9}, {3.771082338636999*^9, 
  3.7710823642564497`*^9}},ExpressionUUID->"49ab34ee-bfd5-49f5-beef-\
400d3cc456dd"],

Cell["\<\
by Tony Koop
Mentor - Matthew Szudzik\
\>", "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.770629192801318*^9, 
  3.770629197888893*^9}, {3.771083279771476*^9, 3.771083292442835*^9}, {
  3.771105208699682*^9, 
  3.771105211107731*^9}},ExpressionUUID->"94536f76-3fd2-4bf6-b228-\
fa93ec9acae9"],

Cell["\<\
The code below is used to fetch data streaming from a weather station using \
HTTP requests. \
\>", "Text",
 CellChangeTimes->{{3.770629225417316*^9, 3.770629243156436*^9}, {
  3.770629343594851*^9, 3.770629518239246*^9}, {3.771083300634212*^9, 
  3.771083301578216*^9}, {3.771083429823304*^9, 3.771083518778612*^9}, {
  3.771084368954064*^9, 
  3.7710843707424173`*^9}},ExpressionUUID->"972131f0-7ddc-4ecb-a5a8-\
cca681f25e5e"],

Cell["\<\
Questions:
Would it be possible to figure out the decay rate of new weather station \
installations? 
Why aren\[CloseCurlyQuote]t governments building new official weather stations?
Could a Neural Net be used for anomaly detection? To say weather the station \
is indoors, effected by HVAC, radiant heat from buildings, etc?
\
\>", "Text",
 CellChangeTimes->{{3.771070855795401*^9, 3.7710709002616243`*^9}, {
  3.771082948212419*^9, 3.771082954403407*^9}, {3.7710843093850603`*^9, 
  3.771084313003523*^9}, {3.77108524061522*^9, 
  3.7710853136265383`*^9}},ExpressionUUID->"76323e88-8e60-4739-8cb9-\
0af2ae696da9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Send", " ", "a", " ", "login", " ", "request", " ", "with", " ", 
    "username", " ", "and", " ", "password", " ", "to", " ", "get", " ", "a", 
    " ", "session", " ", "token", " ", "and", " ", "account", " ", 
    RowBox[{"ID", "."}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"loginData", "=", 
     RowBox[{"URLExecute", "[", 
      RowBox[{
       RowBox[{"HTTPRequest", "[", 
        RowBox[{"\[LeftAssociation]", "\n", 
         RowBox[{
          RowBox[{"Method", "\[Rule]", "\"\<POST\>\""}], ",", "\n", 
          RowBox[{"\"\<Scheme\>\"", "\[Rule]", "\"\<https\>\""}], ",", "\n", 
          RowBox[{
          "\"\<Domain\>\"", "\[Rule]", "\"\<marapi.myacurite.com\>\""}], ",", 
          "\n", 
          RowBox[{"\"\<Path\>\"", "\[Rule]", "\"\</users/login\>\""}], ",", 
          "\n", 
          RowBox[{
          "\"\<ContentType\>\"", "\[Rule]", "\"\<application/json\>\""}], ",",
           "\n", 
          RowBox[{"\"\<Body\>\"", "\[Rule]", 
           RowBox[{"ExportString", "[", 
            RowBox[{
             RowBox[{"<|", "\n", 
              RowBox[{
               RowBox[{
               "\"\<email\>\"", "\[Rule]", "\"\<wrfcoin@gmx.com\>\""}], ",", 
               "\n", 
               RowBox[{"\"\<password\>\"", "\[Rule]", "\"\<h5h3f**kD\>\""}], 
               ",", "\n", 
               RowBox[{"\"\<remember\>\"", "\[Rule]", "\"\<True\>\""}]}], 
              "\n", "|>"}], ",", "\"\<RawJSON\>\""}], "]"}]}]}], 
         "\[RightAssociation]"}], "]"}], ",", "\"\<RawJSON\>\""}], "]"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"mytoken", "=", 
     RowBox[{"loginData", "[", "\"\<token_id\>\"", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"myaccountid", "=", 
     RowBox[{"loginData", "[", 
      RowBox[{"[", 
       RowBox[{
       "\"\<user\>\"", ",", "\"\<account_users\>\"", ",", "1", ",", 
        "\"\<account_id\>\""}], "]"}], "]"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{{3.771082391812119*^9, 3.7710823955685368`*^9}, {
   3.771083316147428*^9, 3.7710833248755836`*^9}, {3.771083555734696*^9, 
   3.771083560126384*^9}, 3.7710837595752974`*^9, 3.77108382104727*^9, {
   3.771084392411193*^9, 3.771084461903273*^9}, {3.771085846168277*^9, 
   3.771085855553465*^9}, {3.771085939340316*^9, 3.77108594333871*^9}, {
   3.7710873409820423`*^9, 3.771087378918182*^9}, 3.771087427253346*^9, {
   3.771087910619619*^9, 3.771087912391076*^9}, {3.77108794563041*^9, 
   3.771087946140184*^9}, {3.771088044068439*^9, 3.771088055248048*^9}, {
   3.7710881002918673`*^9, 3.771088104291875*^9}, {3.771088139689871*^9, 
   3.771088233007464*^9}, {3.771088510625771*^9, 3.771088512326501*^9}, {
   3.771088553596797*^9, 3.771088583212084*^9}, 3.7710891179729443`*^9, {
   3.771099076435253*^9, 3.771099077432643*^9}, {3.771099127377956*^9, 
   3.771099132705564*^9}, {3.771104896845284*^9, 3.771104902879814*^9}, {
   3.771105127795205*^9, 3.771105142577239*^9}, {3.771105438238021*^9, 
   3.7711054413073397`*^9}},ExpressionUUID->"6f6d6f81-9861-478a-b041-\
80bfc39edb92"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Find", " ", "the", " ", "ID", " ", "of", " ", "the", " ", "particular", 
    " ", "weather", " ", "station", " ", "in", " ", "question"}], "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"hubsData", "=", 
     RowBox[{"URLExecute", "[", 
      RowBox[{
       RowBox[{"HTTPRequest", "[", 
        RowBox[{"<|", "\n", "   ", 
         RowBox[{
          RowBox[{"Method", " ", "\[Rule]", " ", "\"\<GET\>\""}], ",", "\n", 
          "   ", 
          RowBox[{"\"\<Scheme\>\"", " ", "\[Rule]", " ", "\"\<https\>\""}], 
          ",", "\n", "   ", 
          RowBox[{"\"\<Domain\>\"", " ", "\[Rule]", " ", 
           RowBox[{"\"\<marapi.myacurite.com/accounts/\>\"", "<>", 
            RowBox[{"ToString", "[", "myaccountid", "]"}], "<>", 
            "\"\</dashboard/hubs\>\""}]}], ",", "\n", "   ", 
          RowBox[{
          "\"\<ContentType\>\"", "\[Rule]", "\"\<application/json\>\""}], ",",
           "\n", "   ", 
          RowBox[{"\"\<Headers\>\"", " ", "\[Rule]", " ", 
           RowBox[{"{", 
            RowBox[{
            "\"\<x-one-vue-token\>\"", " ", "\[Rule]", " ", "mytoken"}], 
            "}"}]}]}], "|>"}], "]"}], ",", "\"\<RawJSON\>\""}], "]"}]}], 
    ";"}], "\n", " ", 
   RowBox[{"myhubid", "=", 
    RowBox[{"hubsData", "[", 
     RowBox[{"[", 
      RowBox[{"\"\<account_hubs\>\"", ",", "1", ",", "\"\<id\>\""}], "]"}], 
     "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.771105453028803*^9, 
  3.771105547529624*^9}},ExpressionUUID->"4fd67fd1-04f7-4573-b972-\
cf4d0bbcaeaa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Obtain", " ", "the", " ", "current", " ", "data", " ", "feed", " ", 
    "from", " ", "the", " ", "particular", " ", "weather", " ", 
    RowBox[{"station", "."}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"weatherfeed", "=", 
    RowBox[{"URLExecute", "[", 
     RowBox[{
      RowBox[{"HTTPRequest", "[", 
       RowBox[{"<|", "\n", "   ", 
        RowBox[{
         RowBox[{"Method", " ", "\[Rule]", " ", "\"\<GET\>\""}], ",", "\n", 
         "   ", 
         RowBox[{"\"\<Scheme\>\"", " ", "\[Rule]", " ", "\"\<https\>\""}], 
         ",", "\n", "   ", 
         RowBox[{"\"\<Domain\>\"", " ", "\[Rule]", " ", 
          RowBox[{"\"\<marapi.myacurite.com/accounts/\>\"", "<>", 
           RowBox[{"ToString", "[", "myaccountid", "]"}], "<>", 
           "\"\</dashboard/hubs/\>\"", "<>", 
           RowBox[{"ToString", "[", "myhubid", "]"}]}]}], ",", "\n", "   ", 
         RowBox[{
         "\"\<ContentType\>\"", "\[Rule]", "\"\<application/json\>\""}], ",", 
         "\n", "   ", 
         RowBox[{"\"\<Headers\>\"", " ", "\[Rule]", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<x-one-vue-token\>\"", " ", "\[Rule]", " ", "mytoken"}], 
           "}"}]}]}], "|>"}], "]"}], ",", "\"\<RawJSON\>\""}], "]"}]}], 
   ";"}]}]], "Code",
 CellChangeTimes->{{3.771082448636874*^9, 3.771082449838254*^9}, {
   3.771083338467074*^9, 3.7710833448235617`*^9}, {3.77108379291358*^9, 
   3.7710838137518787`*^9}, {3.7710840608636713`*^9, 3.771084070035021*^9}, {
   3.771084134332685*^9, 3.771084135081994*^9}, {3.771085922018978*^9, 
   3.7710859539142*^9}, {3.7710879556917143`*^9, 3.771087967027676*^9}, {
   3.7710885916439466`*^9, 3.771088608800115*^9}, {3.771088756564013*^9, 
   3.77108876179359*^9}, {3.771088842226864*^9, 3.771088846537229*^9}, {
   3.771089103315099*^9, 3.77108913465497*^9}, {3.7710891793458443`*^9, 
   3.771089179477522*^9}, 3.771089291940974*^9, {3.771089327800702*^9, 
   3.771089329664217*^9}, {3.7710893740587683`*^9, 3.771089375149967*^9}, {
   3.771089407454576*^9, 3.771089417456294*^9}, {3.771089458408695*^9, 
   3.771089483509128*^9}, {3.771089570159154*^9, 3.771089630728292*^9}, {
   3.771089664303707*^9, 3.771089704623885*^9}, 3.771089906126796*^9, {
   3.771099112875031*^9, 3.7710991394643297`*^9}, {3.771101007988124*^9, 
   3.7711010518521547`*^9}, {3.7711011290688057`*^9, 3.771101133640033*^9}, {
   3.771105595400465*^9, 3.771105613308576*^9}},
 CellLabel->
  "In[208]:=",ExpressionUUID->"2614d193-01b2-416b-ac9a-e7b8c11e22a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Organize", " ", "data", " ", "into", " ", "format", " ", 
    RowBox[{"that", "'"}], "ll", " ", "display", " ", "into", " ", "a", " ", 
    "tidy", " ", 
    RowBox[{"Dataset", ".", " ", "Consider"}], " ", "cases", " ", "with", " ",
     "different", " ", "units"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"deviceRawData", "=", 
     RowBox[{"weatherfeed", "[", 
      RowBox[{"[", 
       RowBox[{"\"\<devices\>\"", ",", "1"}], "]"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"sensorRawData", "=", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"deviceRawData", "[", 
        RowBox[{"[", 
         RowBox[{"\"\<sensors\>\"", ",", "All", ",", "\"\<sensor_name\>\""}], 
         "]"}], "]"}], "\[Rule]", 
       RowBox[{"deviceRawData", "[", 
        RowBox[{"[", "\"\<sensors\>\"", "]"}], "]"}]}], "]"}]}], ";"}], "\n", 
   
   RowBox[{
    RowBox[{"sensorUnits", "=", 
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Temperature\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Temperature\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<F\>\"", ",", "\"\<DegreesFahrenheit\>\"", ",", 
          "\"\<C\>\"", ",", "\"\<DegreesCelsius\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Humidity\>\"", "\[Rule]", "\"\<Percent\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Wind Speed\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Wind Speed\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<mph\>\"", ",", 
          RowBox[{"\"\<Miles\>\"", "/", "\"\<Hours\>\""}], ",", 
          "\"\<km/h\>\"", ",", 
          RowBox[{"\"\<Kilometers\>\"", "/", "\"\<Hours\>\""}], ",", 
          "\"\<kn\>\"", ",", "\"\<Knots\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Wind Direction\>\"", "\[Rule]", "\"\<Degrees\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Feels Like\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Feels Like\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<F\>\"", ",", "\"\<DegreesFahrenheit\>\"", ",", 
          "\"\<C\>\"", ",", "\"\<DegreesCelsius\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Dew Point\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Dew Point\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<F\>\"", ",", "\"\<DegreesFahrenheit\>\"", ",", 
          "\"\<C\>\"", ",", "\"\<DegreesCelsius\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Pressure\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Pressure\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<inHg\>\"", ",", "\"\<InchesOfMercury\>\"", ",", 
          "\"\<hPa\>\"", ",", "\"\<Hectopascals\>\""}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Rainfall\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Rainfall\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<in\>\"", ",", "\"\<Inches\>\"", ",", "\"\<mm\>\"", ",", 
          "\"\<Millimeters\>\""}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Wind Speed Average\>\"", "\[Rule]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"sensorRawData", "[", 
           RowBox[{"\"\<Wind Speed\>\"", ",", "\"\<chart_unit\>\""}], "]"}], 
          ",", "\"\<mph\>\"", ",", 
          RowBox[{"\"\<Miles\>\"", "/", "\"\<Hours\>\""}], ",", 
          "\"\<km/h\>\"", ",", 
          RowBox[{"\"\<Kilometers\>\"", "/", "\"\<Hours\>\""}], ",", 
          "\"\<kn\>\"", ",", "\"\<Knots\>\""}], "]"}]}]}], 
      "\[IndentingNewLine]", "|>"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"Dataset", "[", 
     RowBox[{"sensorData", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Sensor\>\"", "\[Rule]", 
           RowBox[{"#", "[", "\"\<sensor_name\>\"", "]"}]}], ",", 
          RowBox[{"\"\<Value\>\"", "\[Rule]", 
           RowBox[{"Quantity", "[", 
            RowBox[{
             RowBox[{"#", "[", "\"\<last_reading_value\>\"", "]"}], ",", 
             RowBox[{"sensorUnits", "[", 
              RowBox[{"#", "[", "\"\<sensor_name\>\"", "]"}], "]"}]}], 
            "]"}]}]}], "|>"}], "&"}], "/@", 
       RowBox[{"Values", "@", "sensorRawData"}]}]}], "]"}], ";"}]}]}]], "Code",\

 CellChangeTimes->{{3.771105833777266*^9, 3.771105937482283*^9}, {
  3.771105974785947*^9, 3.771105985849489*^9}, {3.771106231569067*^9, 
  3.771106247050165*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"41d28179-da58-4c8f-8823-03a3b422baec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"isoStringWithTZToDateObject", "[", "string_String", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"by", " ", "Jesse"}], " ", "*)"}], 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"stringParts", "=", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"string", ",", 
         RowBox[{
         "RegularExpression", "[", 
          "\"\<(?=((\\\\+|-)\\\\d{2}:\\\\d{2})|Z$)\>\"", "]"}]}], "]"}]}], 
      ",", "tzpart", ",", "tzoffset", ",", "signedtzoffset"}], "}"}], ",", 
    RowBox[{
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "stringParts", "]"}], "===", "1"}], ",", 
       RowBox[{"signedtzoffset", "=", "Automatic"}], ",", 
       RowBox[{
        RowBox[{"ToUpperCase", "[", 
         RowBox[{"stringParts", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], "===", "\"\<Z\>\""}], ",", 
       RowBox[{"signedtzoffset", "=", "0"}], ",", "True", ",", 
       RowBox[{
        RowBox[{"tzpart", "=", 
         RowBox[{"StringSplit", "[", 
          RowBox[{
           RowBox[{"stringParts", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"RegularExpression", "[", "\"\<(?<=\\\\+|-)\>\"", "]"}], 
             ",", "\"\<:\>\""}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tzoffset", "=", 
         RowBox[{"NumberCompose", "[", 
          RowBox[{
           RowBox[{"FromDigits", "/@", 
            RowBox[{"Rest", "[", "tzpart", "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"1", "/", "60"}]}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"signedtzoffset", "=", 
         RowBox[{"N", "@", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"tzpart", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "===", "\"\<-\>\""}], ",", 
            RowBox[{"-", "tzoffset"}], ",", "tzoffset"}], "]"}]}]}], ";"}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"DateObject", "[", 
      RowBox[{
       RowBox[{"stringParts", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"TimeZone", "\[Rule]", "signedtzoffset"}]}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.771104015492691*^9, 3.771104040373913*^9}},
 CellLabel->
  "In[181]:=",ExpressionUUID->"2ecb5f8b-57cb-4eb7-bf7d-2a8949d4f5f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", 
  RowBox[{"dataTable", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Sensors\>\"", "\[Rule]", "sensorData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Timestamp\>\"", "\[Rule]", 
      RowBox[{"TimeZoneConvert", "[", 
       RowBox[{"isoStringWithTZToDateObject", "[", 
        RowBox[{"deviceRawData", "[", "\"\<last_check_in_at\>\"", "]"}], 
        "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Position\>\"", "\[Rule]", 
      RowBox[{"GeoPosition", "[", 
       RowBox[{"Append", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Interpreter", "[", "\"\<Real\>\"", "]"}], "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"weatherfeed", "[", "\"\<latitude\>\"", "]"}], ",", 
            RowBox[{"weatherfeed", "[", "\"\<longitude\>\"", "]"}]}], "}"}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Quantity", "[", 
          RowBox[{
           RowBox[{"weatherfeed", "[", "\"\<elevation\>\"", "]"}], ",", 
           RowBox[{"Switch", "[", 
            RowBox[{
             RowBox[{"weatherfeed", "[", "\"\<elevation_unit\>\"", "]"}], 
             ",", "\"\<ft\>\"", ",", "\"\<Feet\>\"", ",", "\"\<m\>\"", ",", 
             "\"\<Meters\>\""}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
        "]"}], "]"}]}]}], "\[IndentingNewLine]", "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.771103019672653*^9, 3.771103040164447*^9}, {
  3.771103106138558*^9, 3.771103122928973*^9}, {3.771103220914947*^9, 
  3.771103284791545*^9}, {3.771103319773189*^9, 3.7711033206652527`*^9}, {
  3.771103537644936*^9, 3.77110353791294*^9}, {3.771103605084442*^9, 
  3.7711036363034687`*^9}, {3.771103677964427*^9, 3.7711036867881002`*^9}, {
  3.7711037394916162`*^9, 3.771103757106861*^9}, {3.771104141324306*^9, 
  3.771104158136682*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"59dbac41-80ae-4805-b5ae-bb540f7f8ba2"],

Cell[BoxData[
 TemplateBox[{TagBox[
    DynamicModuleBox[{
     TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
      Data`UnorderedAssociation[
       "RowCount" -> 20, "Length" -> 3, "InitialType" -> 
        TypeSystem`Struct[{"Sensors", "Timestamp", "Position"}, {
           TypeSystem`Vector[
            TypeSystem`Struct[{"Sensor", "Value"}, {
              TypeSystem`Atom[String], TypeSystem`AnyType}], 9], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[GeoPosition]}], "Shape" -> 
        TypeSystem`PackageScope`DocumentShape[
          
          Association[{"Sensors"} -> 
           TypeSystem`PackageScope`ElidedShape[1], {"Timestamp"} -> 
           TypeSystem`PackageScope`AtomShape[75], {"Position"} -> 
           TypeSystem`PackageScope`AtomShape[106]], 1], "InitialData" -> 
        TypeSystem`PackageScope`CacheHandle[1978208416], "Type" -> 
        TypeSystem`Struct[{"Sensors", "Timestamp", "Position"}, {
           TypeSystem`Vector[
            TypeSystem`Struct[{"Sensor", "Value"}, {
              TypeSystem`Atom[String], TypeSystem`AnyType}], 9], 
           TypeSystem`Atom[DateObject], 
           TypeSystem`Atom[GeoPosition]}], "HandleQ" -> True, "RowTarget" -> 
        20, "Data" -> TypeSystem`PackageScope`CacheHandle[1978208416]], 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$pos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
        TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
           Style[
            Grid[{{
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Sensors\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Sensors\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1992936611][{
                    Key["Sensors"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
                  GeneralUtilities`Slice[
                   Key["Sensors"]]], "Mouse"], Background -> GrayLevel[0.95], 
                Alignment -> {Left, Baseline}], 
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 9], " }  "}], 
                    Style[
                    Row[{"  { ", 
                    Subscript["\[Ellipsis]", 9], " }  "}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1992936611][{
                    Key["Sensors"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
                  GeneralUtilities`Slice[
                   Key["Sensors"]]], "Mouse"], BaseStyle -> {
                  GrayLevel[0.5]}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Timestamp\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Timestamp\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1992936611][{
                    Key["Timestamp"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
                  GeneralUtilities`Slice[
                   Key["Timestamp"]]], "Mouse"], Background -> 
                GrayLevel[0.95], Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"Tue 2 Jul 2019 20:31:06\"", FontColor -> RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
                  GeneralUtilities`Slice[
                   Key["Timestamp"]]], "Mouse"], 
                ImageSize -> {{75, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}, {
               Item[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Pane[
                    RawBoxes[
                    StyleBox["\"Position\"", FontColor -> GrayLevel[0.4]]], {{
                    20, Full}, 15}], 
                    Style[
                    Pane[
                    RawBoxes[
                    StyleBox[
                    "\"Position\"", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], {{20, Full}, 15}], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1992936611][{
                    Key["Position"]}]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
                  GeneralUtilities`Slice[
                   Key["Position"]]], "Mouse"], Background -> GrayLevel[0.95],
                 Alignment -> {Left, Baseline}], 
               Pane[
                Annotation[
                 RawBoxes[
                  StyleBox[
                  "\"GeoPosition[{42.387, -71.2206, 13.1978}]\"", FontColor -> 
                   RGBColor[{
                    Rational[33, 74], 
                    Rational[27, 74], 
                    Rational[117, 370]}]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
                  GeneralUtilities`Slice[
                   Key["Position"]]], "Mouse"], 
                ImageSize -> {{106, Full}, Automatic}, 
                Alignment -> {Left, Baseline}]}}, BaseStyle -> {ContextMenu -> {
                 MenuItem["Copy position to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Copy data to clipboard", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                  MenuEvaluator -> Automatic], Delimiter, 
                 MenuItem["Paste position in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                   TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic], 
                 MenuItem["Paste data in new cell", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                  MenuEvaluator -> Automatic]}, FontFamily -> "Verdana", 
               FontSize -> 12}, Alignment -> Left, RowMinHeight -> 1.5, 
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
             BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
            LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False,
             ShowAutoStyles -> False]], 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = True, 
         TypeSystem`NestedGrid`PackagePrivate`self = BoxObject[175153]}, 
        Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
         TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
            Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
            
            Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
              TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
              TypeSystem`NestedGrid`PackagePrivate`LookupCacheValue[
                TypeSystem`NestedGrid`PackagePrivate`$state$$["Data"]]}, 
             TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = 
              If[TypeSystem`NestedGrid`PackagePrivate`tmpData$ === 
                TypeSystem`NestedGrid`PackagePrivate`$NotCached, 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
                 TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1992936611][
                TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
               Not[
                FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
               TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
          TypeSystem`NestedGrid`PackagePrivate`$pos$$; If[
            FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
            TypeSystem`SparseGrid[
             TypeSystem`H["(data no longer present)"]], 
            If[GeneralUtilities`$DebugMode, 
             Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
               TypeSystem`NestedGrid`PackagePrivate`formatState[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$pos$$]}], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$pos$$}], 
        DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$posCell$$, 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`alignBar[
        TypeSystem`NestedGrid`PackagePrivate`$state$$][
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`Pathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$pos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 1992936611]]]], 
        TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Framed[
        Dynamic[
         Replace[
          MouseAnnotation[Null], {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][Null] -> 
           "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[1992936611][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path, 
              Blank[]]] :> (
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], TrackedSymbols :> {}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 14}]}, 
     DynamicBox[
      ToBoxes[
       Column[
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, {
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}, {
         TypeSystem`NestedGrid`PackagePrivate`$topBar$$, 
          TypeSystem`NestedGrid`PackagePrivate`displayScrollBar[
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
           TypeSystem`NestedGrid`PackagePrivate`$pos$$], 
          TypeSystem`NestedGrid`PackagePrivate`onDesktopShow[
           TypeSystem`NestedGrid`PackagePrivate`alignBar[
           TypeSystem`NestedGrid`PackagePrivate`$state$$][
           TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]]}], Spacings -> 
        If[TypeSystem`NestedGrid`PackagePrivate`$path$$ == {}, 
          0, {{}, {0, 0.05, 0}}]], StandardForm], 
      ImageSizeCache -> {338., {42.134033203125, 47.865966796875}}, 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     BaseStyle -> {LineBreakWithin -> False}, Deinitialization :> 
     TypeSystem`NestedGrid`PackagePrivate`deleteState[
      TypeSystem`NestedGrid`PackagePrivate`$state$$], 
     DynamicModuleValues :> {}, Initialization :> 
     Block[{$ContextPath = $ContextPath}, 
       Needs["TypeSystem`"]]], Deploy, DefaultBaseStyle -> "Deploy"]},
  "CopyTag",
  DisplayFunction->(#& ),
  InterpretationFunction->("Dataset[<>]"& )]], "Output",
 CellChangeTimes->{
  3.771103116651464*^9, 3.771103254177102*^9, 3.771103286469619*^9, 
   3.7711035390582867`*^9, 3.771103782509119*^9, {3.77110415424039*^9, 
   3.771104158642457*^9}},
 CellLabel->
  "Out[190]=",ExpressionUUID->"6b8d015d-0f79-4edb-9340-f8fd1777851c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Give", " ", "the", " ", "string", " ", "of", " ", "weather", " ", "data",
      " ", "above"}], ",", " ", 
    RowBox[{
    "find", " ", "its", " ", "hash", " ", "and", " ", "insert", " ", "into", 
     " ", "the", " ", "Wolfram", " ", "Blockchain"}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"Hash", "[", 
    RowBox[{"expr", ",", " ", "\"\<type\>\"", ",", " ", "\"\<format\>\""}], 
    "]"}], "\n", 
   RowBox[{"BlockchainPut", "[", "dataTable", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.7710849506615877`*^9, 3.7710849962975063`*^9}, {
   3.771085179449616*^9, 3.771085213754734*^9}, {3.7710854046266212`*^9, 
   3.7710854065993137`*^9}, {3.771085515566758*^9, 3.771085535084083*^9}, {
   3.771097492141831*^9, 3.771097493471736*^9}, {3.7710987890719957`*^9, 
   3.771098801551036*^9}, 
   3.7711045429472923`*^9},ExpressionUUID->"3328e4ce-4400-4a1f-9502-\
1359fb90981f"],

Cell[BoxData["Databin"], "Input",
 CellChangeTimes->{{3.77110525221054*^9, 
  3.7711052557051373`*^9}},ExpressionUUID->"90df08dc-cf92-4a75-9a88-\
70d20fac1e77"]
}, Open  ]]
},
WindowSize->{1124, 748},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 325, 5, 98, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd"],
Cell[908, 29, 531, 11, 58, "Text",ExpressionUUID->"94536f76-3fd2-4bf6-b228-fa93ec9acae9"],
Cell[1442, 42, 438, 9, 35, "Text",ExpressionUUID->"972131f0-7ddc-4ecb-a5a8-cca681f25e5e"],
Cell[1883, 53, 624, 13, 127, "Text",ExpressionUUID->"76323e88-8e60-4739-8cb9-0af2ae696da9"],
Cell[2510, 68, 3091, 65, 319, "Code",ExpressionUUID->"6f6d6f81-9861-478a-b041-80bfc39edb92"],
Cell[5604, 135, 1566, 39, 186, "Code",ExpressionUUID->"4fd67fd1-04f7-4573-b972-cf4d0bbcaeaa"],
Cell[7173, 176, 2546, 49, 167, "Code",ExpressionUUID->"2614d193-01b2-416b-ac9a-e7b8c11e22a0"],
Cell[9722, 227, 5134, 116, 319, "Code",ExpressionUUID->"41d28179-da58-4c8f-8823-03a3b422baec"],
Cell[14859, 345, 2498, 64, 178, "Input",ExpressionUUID->"2ecb5f8b-57cb-4eb7-bf7d-2a8949d4f5f9"],
Cell[CellGroupData[{
Cell[17382, 413, 1985, 40, 178, "Input",ExpressionUUID->"59dbac41-80ae-4805-b5ae-bb540f7f8ba2"],
Cell[19370, 455, 16244, 310, 109, "Output",ExpressionUUID->"6b8d015d-0f79-4edb-9340-f8fd1777851c"]
}, Open  ]],
Cell[35629, 768, 943, 21, 91, "Code",ExpressionUUID->"3328e4ce-4400-4a1f-9502-1359fb90981f"],
Cell[36575, 791, 160, 3, 30, "Input",ExpressionUUID->"90df08dc-cf92-4a75-9a88-70d20fac1e77"]
}, Open  ]]
}
]
*)

